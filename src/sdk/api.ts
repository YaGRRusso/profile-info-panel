/* tslint:disable */
/* eslint-disable */
/**
 * Profile Info
 * Api de informações pessoais feita em NestJS com Prisma
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface CourseDto
 */
export interface CourseDto {
    /**
     * 
     * @type {string}
     * @memberof CourseDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof CourseDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CourseDto
     */
    'school': string;
    /**
     * 
     * @type {string}
     * @memberof CourseDto
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof CourseDto
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof CourseDto
     */
    'certificate': string;
    /**
     * 
     * @type {number}
     * @memberof CourseDto
     */
    'hours': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof CourseDto
     */
    'skills'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CourseDto
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof CourseDto
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof CourseDto
     */
    'userId': string;
}
/**
 * 
 * @export
 * @interface CreateCourseDto
 */
export interface CreateCourseDto {
    /**
     * 
     * @type {string}
     * @memberof CreateCourseDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateCourseDto
     */
    'school': string;
    /**
     * 
     * @type {string}
     * @memberof CreateCourseDto
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof CreateCourseDto
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof CreateCourseDto
     */
    'certificate': string;
    /**
     * 
     * @type {number}
     * @memberof CreateCourseDto
     */
    'hours': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateCourseDto
     */
    'skills'?: Array<string>;
}
/**
 * 
 * @export
 * @interface CreateExperienceDto
 */
export interface CreateExperienceDto {
    /**
     * 
     * @type {string}
     * @memberof CreateExperienceDto
     */
    'role': string;
    /**
     * 
     * @type {string}
     * @memberof CreateExperienceDto
     */
    'organization': string;
    /**
     * 
     * @type {string}
     * @memberof CreateExperienceDto
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof CreateExperienceDto
     */
    'start': string;
    /**
     * 
     * @type {string}
     * @memberof CreateExperienceDto
     */
    'end'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateExperienceDto
     */
    'skills'?: Array<string>;
}
/**
 * 
 * @export
 * @interface CreateFormationDto
 */
export interface CreateFormationDto {
    /**
     * 
     * @type {string}
     * @memberof CreateFormationDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateFormationDto
     */
    'school': string;
    /**
     * 
     * @type {string}
     * @memberof CreateFormationDto
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof CreateFormationDto
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof CreateFormationDto
     */
    'certificate': string;
    /**
     * 
     * @type {string}
     * @memberof CreateFormationDto
     */
    'start': string;
    /**
     * 
     * @type {string}
     * @memberof CreateFormationDto
     */
    'end'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateFormationDto
     */
    'skills'?: Array<string>;
}
/**
 * 
 * @export
 * @interface CreateProjectDto
 */
export interface CreateProjectDto {
    /**
     * 
     * @type {string}
     * @memberof CreateProjectDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateProjectDto
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof CreateProjectDto
     */
    'image': string;
    /**
     * 
     * @type {string}
     * @memberof CreateProjectDto
     */
    'link': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateProjectDto
     */
    'skills'?: Array<string>;
}
/**
 * 
 * @export
 * @interface CreateSkillDto
 */
export interface CreateSkillDto {
    /**
     * 
     * @type {string}
     * @memberof CreateSkillDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateSkillDto
     */
    'category': CreateSkillDtoCategoryEnum;
}

export const CreateSkillDtoCategoryEnum = {
    Language: 'LANGUAGE',
    Library: 'LIBRARY',
    Tool: 'TOOL',
    System: 'SYSTEM',
    Other: 'OTHER'
} as const;

export type CreateSkillDtoCategoryEnum = typeof CreateSkillDtoCategoryEnum[keyof typeof CreateSkillDtoCategoryEnum];

/**
 * 
 * @export
 * @interface CreateUserDto
 */
export interface CreateUserDto {
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'birth': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'nickname': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'phone': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'picture': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'address': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'postal': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'presentation': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'title': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateUserDto
     */
    'skills'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ExperienceDto
 */
export interface ExperienceDto {
    /**
     * 
     * @type {string}
     * @memberof ExperienceDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ExperienceDto
     */
    'role': string;
    /**
     * 
     * @type {string}
     * @memberof ExperienceDto
     */
    'organization': string;
    /**
     * 
     * @type {string}
     * @memberof ExperienceDto
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof ExperienceDto
     */
    'start': string;
    /**
     * 
     * @type {string}
     * @memberof ExperienceDto
     */
    'end'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ExperienceDto
     */
    'skills'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ExperienceDto
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ExperienceDto
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ExperienceDto
     */
    'userId': string;
}
/**
 * 
 * @export
 * @interface FormationDto
 */
export interface FormationDto {
    /**
     * 
     * @type {string}
     * @memberof FormationDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof FormationDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof FormationDto
     */
    'school': string;
    /**
     * 
     * @type {string}
     * @memberof FormationDto
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof FormationDto
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof FormationDto
     */
    'certificate': string;
    /**
     * 
     * @type {string}
     * @memberof FormationDto
     */
    'start': string;
    /**
     * 
     * @type {string}
     * @memberof FormationDto
     */
    'end'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof FormationDto
     */
    'skills'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof FormationDto
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof FormationDto
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof FormationDto
     */
    'userId': string;
}
/**
 * 
 * @export
 * @interface LoginUserDto
 */
export interface LoginUserDto {
    /**
     * 
     * @type {string}
     * @memberof LoginUserDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof LoginUserDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface MeDto
 */
export interface MeDto {
    /**
     * 
     * @type {string}
     * @memberof MeDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof MeDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof MeDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof MeDto
     */
    'role': MeDtoRoleEnum;
}

export const MeDtoRoleEnum = {
    User: 'USER',
    Admin: 'ADMIN'
} as const;

export type MeDtoRoleEnum = typeof MeDtoRoleEnum[keyof typeof MeDtoRoleEnum];

/**
 * 
 * @export
 * @interface ProjectDto
 */
export interface ProjectDto {
    /**
     * 
     * @type {string}
     * @memberof ProjectDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectDto
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectDto
     */
    'image': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectDto
     */
    'link': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProjectDto
     */
    'skills'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ProjectDto
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectDto
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectDto
     */
    'userId': string;
}
/**
 * 
 * @export
 * @interface SearchCourseDto
 */
export interface SearchCourseDto {
    /**
     * 
     * @type {string}
     * @memberof SearchCourseDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCourseDto
     */
    'school'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCourseDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCourseDto
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchCourseDto
     */
    'certificate'?: string;
    /**
     * 
     * @type {number}
     * @memberof SearchCourseDto
     */
    'hours'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof SearchCourseDto
     */
    'skills'?: Array<string>;
}
/**
 * 
 * @export
 * @interface SearchExperienceDto
 */
export interface SearchExperienceDto {
    /**
     * 
     * @type {string}
     * @memberof SearchExperienceDto
     */
    'role'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchExperienceDto
     */
    'organization'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchExperienceDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchExperienceDto
     */
    'start'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchExperienceDto
     */
    'end'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof SearchExperienceDto
     */
    'skills'?: Array<string>;
}
/**
 * 
 * @export
 * @interface SearchFormationDto
 */
export interface SearchFormationDto {
    /**
     * 
     * @type {string}
     * @memberof SearchFormationDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchFormationDto
     */
    'school'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchFormationDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchFormationDto
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchFormationDto
     */
    'certificate'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchFormationDto
     */
    'start'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchFormationDto
     */
    'end'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof SearchFormationDto
     */
    'skills'?: Array<string>;
}
/**
 * 
 * @export
 * @interface SearchProjectDto
 */
export interface SearchProjectDto {
    /**
     * 
     * @type {string}
     * @memberof SearchProjectDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchProjectDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchProjectDto
     */
    'image'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchProjectDto
     */
    'link'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof SearchProjectDto
     */
    'skills'?: Array<string>;
}
/**
 * 
 * @export
 * @interface SearchSkillDto
 */
export interface SearchSkillDto {
    /**
     * 
     * @type {string}
     * @memberof SearchSkillDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchSkillDto
     */
    'category'?: SearchSkillDtoCategoryEnum;
}

export const SearchSkillDtoCategoryEnum = {
    Language: 'LANGUAGE',
    Library: 'LIBRARY',
    Tool: 'TOOL',
    System: 'SYSTEM',
    Other: 'OTHER'
} as const;

export type SearchSkillDtoCategoryEnum = typeof SearchSkillDtoCategoryEnum[keyof typeof SearchSkillDtoCategoryEnum];

/**
 * 
 * @export
 * @interface SearchUserDto
 */
export interface SearchUserDto {
    /**
     * 
     * @type {string}
     * @memberof SearchUserDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchUserDto
     */
    'birth'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchUserDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchUserDto
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchUserDto
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchUserDto
     */
    'nickname'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchUserDto
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchUserDto
     */
    'picture'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchUserDto
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchUserDto
     */
    'postal'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchUserDto
     */
    'presentation'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchUserDto
     */
    'title'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof SearchUserDto
     */
    'skills'?: Array<string>;
}
/**
 * 
 * @export
 * @interface SkillDto
 */
export interface SkillDto {
    /**
     * 
     * @type {string}
     * @memberof SkillDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof SkillDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof SkillDto
     */
    'category': SkillDtoCategoryEnum;
    /**
     * 
     * @type {string}
     * @memberof SkillDto
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof SkillDto
     */
    'updatedAt': string;
}

export const SkillDtoCategoryEnum = {
    Language: 'LANGUAGE',
    Library: 'LIBRARY',
    Tool: 'TOOL',
    System: 'SYSTEM',
    Other: 'OTHER'
} as const;

export type SkillDtoCategoryEnum = typeof SkillDtoCategoryEnum[keyof typeof SkillDtoCategoryEnum];

/**
 * 
 * @export
 * @interface UpdateCourseDto
 */
export interface UpdateCourseDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateCourseDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCourseDto
     */
    'school'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCourseDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCourseDto
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCourseDto
     */
    'certificate'?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateCourseDto
     */
    'hours'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateCourseDto
     */
    'skills'?: Array<string>;
}
/**
 * 
 * @export
 * @interface UpdateExperienceDto
 */
export interface UpdateExperienceDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateExperienceDto
     */
    'role'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateExperienceDto
     */
    'organization'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateExperienceDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateExperienceDto
     */
    'start'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateExperienceDto
     */
    'end'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateExperienceDto
     */
    'skills'?: Array<string>;
}
/**
 * 
 * @export
 * @interface UpdateFormationDto
 */
export interface UpdateFormationDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateFormationDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateFormationDto
     */
    'school'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateFormationDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateFormationDto
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateFormationDto
     */
    'certificate'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateFormationDto
     */
    'start'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateFormationDto
     */
    'end'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateFormationDto
     */
    'skills'?: Array<string>;
}
/**
 * 
 * @export
 * @interface UpdateProjectDto
 */
export interface UpdateProjectDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateProjectDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProjectDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProjectDto
     */
    'image'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProjectDto
     */
    'link'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateProjectDto
     */
    'skills'?: Array<string>;
}
/**
 * 
 * @export
 * @interface UpdateSkillDto
 */
export interface UpdateSkillDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateSkillDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateSkillDto
     */
    'category'?: UpdateSkillDtoCategoryEnum;
}

export const UpdateSkillDtoCategoryEnum = {
    Language: 'LANGUAGE',
    Library: 'LIBRARY',
    Tool: 'TOOL',
    System: 'SYSTEM',
    Other: 'OTHER'
} as const;

export type UpdateSkillDtoCategoryEnum = typeof UpdateSkillDtoCategoryEnum[keyof typeof UpdateSkillDtoCategoryEnum];

/**
 * 
 * @export
 * @interface UpdateUserDto
 */
export interface UpdateUserDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    'birth'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    'nickname'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    'picture'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    'postal'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    'presentation'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    'title'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateUserDto
     */
    'skills'?: Array<string>;
}
/**
 * 
 * @export
 * @interface UserDto
 */
export interface UserDto {
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'birth': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'nickname': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'phone': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'picture': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'address': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'postal': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'presentation': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'title': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserDto
     */
    'skills'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'role': UserDtoRoleEnum;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'updatedAt': string;
}

export const UserDtoRoleEnum = {
    User: 'USER',
    Admin: 'ADMIN'
} as const;

export type UserDtoRoleEnum = typeof UserDtoRoleEnum[keyof typeof UserDtoRoleEnum];


/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {LoginUserDto} loginUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin: async (loginUserDto: LoginUserDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginUserDto' is not null or undefined
            assertParamExists('authControllerLogin', 'loginUserDto', loginUserDto)
            const localVarPath = `/auth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerMe: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerValidate: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/validate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {LoginUserDto} loginUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerLogin(loginUserDto: LoginUserDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerLogin(loginUserDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerLogin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerMe(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerMe(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerMe']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerValidate(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerValidate(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerValidate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @param {LoginUserDto} loginUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin(loginUserDto: LoginUserDto, options?: any): AxiosPromise<MeDto> {
            return localVarFp.authControllerLogin(loginUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerMe(options?: any): AxiosPromise<MeDto> {
            return localVarFp.authControllerMe(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerValidate(options?: any): AxiosPromise<MeDto> {
            return localVarFp.authControllerValidate(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {LoginUserDto} loginUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerLogin(loginUserDto: LoginUserDto, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerLogin(loginUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerMe(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerMe(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerValidate(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerValidate(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CoursesApi - axios parameter creator
 * @export
 */
export const CoursesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {UpdateCourseDto} updateCourseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesControllerAddSkills: async (id: string, updateCourseDto: UpdateCourseDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('coursesControllerAddSkills', 'id', id)
            // verify required parameter 'updateCourseDto' is not null or undefined
            assertParamExists('coursesControllerAddSkills', 'updateCourseDto', updateCourseDto)
            const localVarPath = `/courses/{id}/skills/add`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCourseDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateCourseDto} createCourseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesControllerCreate: async (createCourseDto: CreateCourseDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createCourseDto' is not null or undefined
            assertParamExists('coursesControllerCreate', 'createCourseDto', createCourseDto)
            const localVarPath = `/courses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCourseDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/courses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesControllerFindOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('coursesControllerFindOne', 'id', id)
            const localVarPath = `/courses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesControllerRemove: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('coursesControllerRemove', 'id', id)
            const localVarPath = `/courses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateCourseDto} updateCourseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesControllerRemoveSkills: async (id: string, updateCourseDto: UpdateCourseDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('coursesControllerRemoveSkills', 'id', id)
            // verify required parameter 'updateCourseDto' is not null or undefined
            assertParamExists('coursesControllerRemoveSkills', 'updateCourseDto', updateCourseDto)
            const localVarPath = `/courses/{id}/skills/remove`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCourseDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SearchCourseDto} searchCourseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesControllerSearchAll: async (searchCourseDto: SearchCourseDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'searchCourseDto' is not null or undefined
            assertParamExists('coursesControllerSearchAll', 'searchCourseDto', searchCourseDto)
            const localVarPath = `/courses/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchCourseDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateCourseDto} updateCourseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesControllerUpdate: async (id: string, updateCourseDto: UpdateCourseDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('coursesControllerUpdate', 'id', id)
            // verify required parameter 'updateCourseDto' is not null or undefined
            assertParamExists('coursesControllerUpdate', 'updateCourseDto', updateCourseDto)
            const localVarPath = `/courses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCourseDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CoursesApi - functional programming interface
 * @export
 */
export const CoursesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CoursesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {UpdateCourseDto} updateCourseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coursesControllerAddSkills(id: string, updateCourseDto: UpdateCourseDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coursesControllerAddSkills(id, updateCourseDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CoursesApi.coursesControllerAddSkills']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateCourseDto} createCourseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coursesControllerCreate(createCourseDto: CreateCourseDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coursesControllerCreate(createCourseDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CoursesApi.coursesControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coursesControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CourseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coursesControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CoursesApi.coursesControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coursesControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coursesControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CoursesApi.coursesControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coursesControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coursesControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CoursesApi.coursesControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateCourseDto} updateCourseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coursesControllerRemoveSkills(id: string, updateCourseDto: UpdateCourseDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coursesControllerRemoveSkills(id, updateCourseDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CoursesApi.coursesControllerRemoveSkills']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {SearchCourseDto} searchCourseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coursesControllerSearchAll(searchCourseDto: SearchCourseDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CourseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coursesControllerSearchAll(searchCourseDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CoursesApi.coursesControllerSearchAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateCourseDto} updateCourseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coursesControllerUpdate(id: string, updateCourseDto: UpdateCourseDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coursesControllerUpdate(id, updateCourseDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CoursesApi.coursesControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CoursesApi - factory interface
 * @export
 */
export const CoursesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CoursesApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {UpdateCourseDto} updateCourseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesControllerAddSkills(id: string, updateCourseDto: UpdateCourseDto, options?: any): AxiosPromise<CourseDto> {
            return localVarFp.coursesControllerAddSkills(id, updateCourseDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateCourseDto} createCourseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesControllerCreate(createCourseDto: CreateCourseDto, options?: any): AxiosPromise<CourseDto> {
            return localVarFp.coursesControllerCreate(createCourseDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesControllerFindAll(options?: any): AxiosPromise<Array<CourseDto>> {
            return localVarFp.coursesControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesControllerFindOne(id: string, options?: any): AxiosPromise<CourseDto> {
            return localVarFp.coursesControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesControllerRemove(id: string, options?: any): AxiosPromise<CourseDto> {
            return localVarFp.coursesControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateCourseDto} updateCourseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesControllerRemoveSkills(id: string, updateCourseDto: UpdateCourseDto, options?: any): AxiosPromise<CourseDto> {
            return localVarFp.coursesControllerRemoveSkills(id, updateCourseDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SearchCourseDto} searchCourseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesControllerSearchAll(searchCourseDto: SearchCourseDto, options?: any): AxiosPromise<Array<CourseDto>> {
            return localVarFp.coursesControllerSearchAll(searchCourseDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateCourseDto} updateCourseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesControllerUpdate(id: string, updateCourseDto: UpdateCourseDto, options?: any): AxiosPromise<CourseDto> {
            return localVarFp.coursesControllerUpdate(id, updateCourseDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CoursesApi - object-oriented interface
 * @export
 * @class CoursesApi
 * @extends {BaseAPI}
 */
export class CoursesApi extends BaseAPI {
    /**
     * 
     * @param {string} id 
     * @param {UpdateCourseDto} updateCourseDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursesApi
     */
    public coursesControllerAddSkills(id: string, updateCourseDto: UpdateCourseDto, options?: RawAxiosRequestConfig) {
        return CoursesApiFp(this.configuration).coursesControllerAddSkills(id, updateCourseDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateCourseDto} createCourseDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursesApi
     */
    public coursesControllerCreate(createCourseDto: CreateCourseDto, options?: RawAxiosRequestConfig) {
        return CoursesApiFp(this.configuration).coursesControllerCreate(createCourseDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursesApi
     */
    public coursesControllerFindAll(options?: RawAxiosRequestConfig) {
        return CoursesApiFp(this.configuration).coursesControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursesApi
     */
    public coursesControllerFindOne(id: string, options?: RawAxiosRequestConfig) {
        return CoursesApiFp(this.configuration).coursesControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursesApi
     */
    public coursesControllerRemove(id: string, options?: RawAxiosRequestConfig) {
        return CoursesApiFp(this.configuration).coursesControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateCourseDto} updateCourseDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursesApi
     */
    public coursesControllerRemoveSkills(id: string, updateCourseDto: UpdateCourseDto, options?: RawAxiosRequestConfig) {
        return CoursesApiFp(this.configuration).coursesControllerRemoveSkills(id, updateCourseDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SearchCourseDto} searchCourseDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursesApi
     */
    public coursesControllerSearchAll(searchCourseDto: SearchCourseDto, options?: RawAxiosRequestConfig) {
        return CoursesApiFp(this.configuration).coursesControllerSearchAll(searchCourseDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateCourseDto} updateCourseDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursesApi
     */
    public coursesControllerUpdate(id: string, updateCourseDto: UpdateCourseDto, options?: RawAxiosRequestConfig) {
        return CoursesApiFp(this.configuration).coursesControllerUpdate(id, updateCourseDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetHello: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appControllerGetHello(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appControllerGetHello(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.appControllerGetHello']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetHello(options?: any): AxiosPromise<void> {
            return localVarFp.appControllerGetHello(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public appControllerGetHello(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).appControllerGetHello(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ExperiencesApi - axios parameter creator
 * @export
 */
export const ExperiencesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {UpdateExperienceDto} updateExperienceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        experiencesControllerAddSkills: async (id: string, updateExperienceDto: UpdateExperienceDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('experiencesControllerAddSkills', 'id', id)
            // verify required parameter 'updateExperienceDto' is not null or undefined
            assertParamExists('experiencesControllerAddSkills', 'updateExperienceDto', updateExperienceDto)
            const localVarPath = `/experiences/{id}/skills/add`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateExperienceDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateExperienceDto} createExperienceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        experiencesControllerCreate: async (createExperienceDto: CreateExperienceDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createExperienceDto' is not null or undefined
            assertParamExists('experiencesControllerCreate', 'createExperienceDto', createExperienceDto)
            const localVarPath = `/experiences`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createExperienceDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        experiencesControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/experiences`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        experiencesControllerFindOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('experiencesControllerFindOne', 'id', id)
            const localVarPath = `/experiences/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        experiencesControllerRemove: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('experiencesControllerRemove', 'id', id)
            const localVarPath = `/experiences/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateExperienceDto} updateExperienceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        experiencesControllerRemoveSkills: async (id: string, updateExperienceDto: UpdateExperienceDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('experiencesControllerRemoveSkills', 'id', id)
            // verify required parameter 'updateExperienceDto' is not null or undefined
            assertParamExists('experiencesControllerRemoveSkills', 'updateExperienceDto', updateExperienceDto)
            const localVarPath = `/experiences/{id}/skills/remove`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateExperienceDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SearchExperienceDto} searchExperienceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        experiencesControllerSearchAll: async (searchExperienceDto: SearchExperienceDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'searchExperienceDto' is not null or undefined
            assertParamExists('experiencesControllerSearchAll', 'searchExperienceDto', searchExperienceDto)
            const localVarPath = `/experiences/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchExperienceDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateExperienceDto} updateExperienceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        experiencesControllerUpdate: async (id: string, updateExperienceDto: UpdateExperienceDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('experiencesControllerUpdate', 'id', id)
            // verify required parameter 'updateExperienceDto' is not null or undefined
            assertParamExists('experiencesControllerUpdate', 'updateExperienceDto', updateExperienceDto)
            const localVarPath = `/experiences/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateExperienceDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExperiencesApi - functional programming interface
 * @export
 */
export const ExperiencesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExperiencesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {UpdateExperienceDto} updateExperienceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async experiencesControllerAddSkills(id: string, updateExperienceDto: UpdateExperienceDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExperienceDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.experiencesControllerAddSkills(id, updateExperienceDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExperiencesApi.experiencesControllerAddSkills']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateExperienceDto} createExperienceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async experiencesControllerCreate(createExperienceDto: CreateExperienceDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExperienceDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.experiencesControllerCreate(createExperienceDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExperiencesApi.experiencesControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async experiencesControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ExperienceDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.experiencesControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExperiencesApi.experiencesControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async experiencesControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExperienceDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.experiencesControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExperiencesApi.experiencesControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async experiencesControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExperienceDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.experiencesControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExperiencesApi.experiencesControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateExperienceDto} updateExperienceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async experiencesControllerRemoveSkills(id: string, updateExperienceDto: UpdateExperienceDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExperienceDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.experiencesControllerRemoveSkills(id, updateExperienceDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExperiencesApi.experiencesControllerRemoveSkills']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {SearchExperienceDto} searchExperienceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async experiencesControllerSearchAll(searchExperienceDto: SearchExperienceDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ExperienceDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.experiencesControllerSearchAll(searchExperienceDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExperiencesApi.experiencesControllerSearchAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateExperienceDto} updateExperienceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async experiencesControllerUpdate(id: string, updateExperienceDto: UpdateExperienceDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExperienceDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.experiencesControllerUpdate(id, updateExperienceDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExperiencesApi.experiencesControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ExperiencesApi - factory interface
 * @export
 */
export const ExperiencesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExperiencesApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {UpdateExperienceDto} updateExperienceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        experiencesControllerAddSkills(id: string, updateExperienceDto: UpdateExperienceDto, options?: any): AxiosPromise<ExperienceDto> {
            return localVarFp.experiencesControllerAddSkills(id, updateExperienceDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateExperienceDto} createExperienceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        experiencesControllerCreate(createExperienceDto: CreateExperienceDto, options?: any): AxiosPromise<ExperienceDto> {
            return localVarFp.experiencesControllerCreate(createExperienceDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        experiencesControllerFindAll(options?: any): AxiosPromise<Array<ExperienceDto>> {
            return localVarFp.experiencesControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        experiencesControllerFindOne(id: string, options?: any): AxiosPromise<ExperienceDto> {
            return localVarFp.experiencesControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        experiencesControllerRemove(id: string, options?: any): AxiosPromise<ExperienceDto> {
            return localVarFp.experiencesControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateExperienceDto} updateExperienceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        experiencesControllerRemoveSkills(id: string, updateExperienceDto: UpdateExperienceDto, options?: any): AxiosPromise<ExperienceDto> {
            return localVarFp.experiencesControllerRemoveSkills(id, updateExperienceDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SearchExperienceDto} searchExperienceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        experiencesControllerSearchAll(searchExperienceDto: SearchExperienceDto, options?: any): AxiosPromise<Array<ExperienceDto>> {
            return localVarFp.experiencesControllerSearchAll(searchExperienceDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateExperienceDto} updateExperienceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        experiencesControllerUpdate(id: string, updateExperienceDto: UpdateExperienceDto, options?: any): AxiosPromise<ExperienceDto> {
            return localVarFp.experiencesControllerUpdate(id, updateExperienceDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExperiencesApi - object-oriented interface
 * @export
 * @class ExperiencesApi
 * @extends {BaseAPI}
 */
export class ExperiencesApi extends BaseAPI {
    /**
     * 
     * @param {string} id 
     * @param {UpdateExperienceDto} updateExperienceDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperiencesApi
     */
    public experiencesControllerAddSkills(id: string, updateExperienceDto: UpdateExperienceDto, options?: RawAxiosRequestConfig) {
        return ExperiencesApiFp(this.configuration).experiencesControllerAddSkills(id, updateExperienceDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateExperienceDto} createExperienceDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperiencesApi
     */
    public experiencesControllerCreate(createExperienceDto: CreateExperienceDto, options?: RawAxiosRequestConfig) {
        return ExperiencesApiFp(this.configuration).experiencesControllerCreate(createExperienceDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperiencesApi
     */
    public experiencesControllerFindAll(options?: RawAxiosRequestConfig) {
        return ExperiencesApiFp(this.configuration).experiencesControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperiencesApi
     */
    public experiencesControllerFindOne(id: string, options?: RawAxiosRequestConfig) {
        return ExperiencesApiFp(this.configuration).experiencesControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperiencesApi
     */
    public experiencesControllerRemove(id: string, options?: RawAxiosRequestConfig) {
        return ExperiencesApiFp(this.configuration).experiencesControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateExperienceDto} updateExperienceDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperiencesApi
     */
    public experiencesControllerRemoveSkills(id: string, updateExperienceDto: UpdateExperienceDto, options?: RawAxiosRequestConfig) {
        return ExperiencesApiFp(this.configuration).experiencesControllerRemoveSkills(id, updateExperienceDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SearchExperienceDto} searchExperienceDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperiencesApi
     */
    public experiencesControllerSearchAll(searchExperienceDto: SearchExperienceDto, options?: RawAxiosRequestConfig) {
        return ExperiencesApiFp(this.configuration).experiencesControllerSearchAll(searchExperienceDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateExperienceDto} updateExperienceDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperiencesApi
     */
    public experiencesControllerUpdate(id: string, updateExperienceDto: UpdateExperienceDto, options?: RawAxiosRequestConfig) {
        return ExperiencesApiFp(this.configuration).experiencesControllerUpdate(id, updateExperienceDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FormationsApi - axios parameter creator
 * @export
 */
export const FormationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {UpdateFormationDto} updateFormationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        formationsControllerAddSkills: async (id: string, updateFormationDto: UpdateFormationDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('formationsControllerAddSkills', 'id', id)
            // verify required parameter 'updateFormationDto' is not null or undefined
            assertParamExists('formationsControllerAddSkills', 'updateFormationDto', updateFormationDto)
            const localVarPath = `/formations/{id}/skills/add`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateFormationDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateFormationDto} createFormationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        formationsControllerCreate: async (createFormationDto: CreateFormationDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createFormationDto' is not null or undefined
            assertParamExists('formationsControllerCreate', 'createFormationDto', createFormationDto)
            const localVarPath = `/formations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createFormationDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        formationsControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/formations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        formationsControllerFindOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('formationsControllerFindOne', 'id', id)
            const localVarPath = `/formations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        formationsControllerRemove: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('formationsControllerRemove', 'id', id)
            const localVarPath = `/formations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateFormationDto} updateFormationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        formationsControllerRemoveSkills: async (id: string, updateFormationDto: UpdateFormationDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('formationsControllerRemoveSkills', 'id', id)
            // verify required parameter 'updateFormationDto' is not null or undefined
            assertParamExists('formationsControllerRemoveSkills', 'updateFormationDto', updateFormationDto)
            const localVarPath = `/formations/{id}/skills/remove`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateFormationDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SearchFormationDto} searchFormationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        formationsControllerSearchAll: async (searchFormationDto: SearchFormationDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'searchFormationDto' is not null or undefined
            assertParamExists('formationsControllerSearchAll', 'searchFormationDto', searchFormationDto)
            const localVarPath = `/formations/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchFormationDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateFormationDto} updateFormationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        formationsControllerUpdate: async (id: string, updateFormationDto: UpdateFormationDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('formationsControllerUpdate', 'id', id)
            // verify required parameter 'updateFormationDto' is not null or undefined
            assertParamExists('formationsControllerUpdate', 'updateFormationDto', updateFormationDto)
            const localVarPath = `/formations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateFormationDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FormationsApi - functional programming interface
 * @export
 */
export const FormationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FormationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {UpdateFormationDto} updateFormationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async formationsControllerAddSkills(id: string, updateFormationDto: UpdateFormationDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FormationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.formationsControllerAddSkills(id, updateFormationDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormationsApi.formationsControllerAddSkills']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateFormationDto} createFormationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async formationsControllerCreate(createFormationDto: CreateFormationDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FormationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.formationsControllerCreate(createFormationDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormationsApi.formationsControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async formationsControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FormationDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.formationsControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormationsApi.formationsControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async formationsControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FormationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.formationsControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormationsApi.formationsControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async formationsControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FormationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.formationsControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormationsApi.formationsControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateFormationDto} updateFormationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async formationsControllerRemoveSkills(id: string, updateFormationDto: UpdateFormationDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FormationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.formationsControllerRemoveSkills(id, updateFormationDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormationsApi.formationsControllerRemoveSkills']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {SearchFormationDto} searchFormationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async formationsControllerSearchAll(searchFormationDto: SearchFormationDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FormationDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.formationsControllerSearchAll(searchFormationDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormationsApi.formationsControllerSearchAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateFormationDto} updateFormationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async formationsControllerUpdate(id: string, updateFormationDto: UpdateFormationDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FormationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.formationsControllerUpdate(id, updateFormationDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormationsApi.formationsControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FormationsApi - factory interface
 * @export
 */
export const FormationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FormationsApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {UpdateFormationDto} updateFormationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        formationsControllerAddSkills(id: string, updateFormationDto: UpdateFormationDto, options?: any): AxiosPromise<FormationDto> {
            return localVarFp.formationsControllerAddSkills(id, updateFormationDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateFormationDto} createFormationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        formationsControllerCreate(createFormationDto: CreateFormationDto, options?: any): AxiosPromise<FormationDto> {
            return localVarFp.formationsControllerCreate(createFormationDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        formationsControllerFindAll(options?: any): AxiosPromise<Array<FormationDto>> {
            return localVarFp.formationsControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        formationsControllerFindOne(id: string, options?: any): AxiosPromise<FormationDto> {
            return localVarFp.formationsControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        formationsControllerRemove(id: string, options?: any): AxiosPromise<FormationDto> {
            return localVarFp.formationsControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateFormationDto} updateFormationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        formationsControllerRemoveSkills(id: string, updateFormationDto: UpdateFormationDto, options?: any): AxiosPromise<FormationDto> {
            return localVarFp.formationsControllerRemoveSkills(id, updateFormationDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SearchFormationDto} searchFormationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        formationsControllerSearchAll(searchFormationDto: SearchFormationDto, options?: any): AxiosPromise<Array<FormationDto>> {
            return localVarFp.formationsControllerSearchAll(searchFormationDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateFormationDto} updateFormationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        formationsControllerUpdate(id: string, updateFormationDto: UpdateFormationDto, options?: any): AxiosPromise<FormationDto> {
            return localVarFp.formationsControllerUpdate(id, updateFormationDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FormationsApi - object-oriented interface
 * @export
 * @class FormationsApi
 * @extends {BaseAPI}
 */
export class FormationsApi extends BaseAPI {
    /**
     * 
     * @param {string} id 
     * @param {UpdateFormationDto} updateFormationDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormationsApi
     */
    public formationsControllerAddSkills(id: string, updateFormationDto: UpdateFormationDto, options?: RawAxiosRequestConfig) {
        return FormationsApiFp(this.configuration).formationsControllerAddSkills(id, updateFormationDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateFormationDto} createFormationDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormationsApi
     */
    public formationsControllerCreate(createFormationDto: CreateFormationDto, options?: RawAxiosRequestConfig) {
        return FormationsApiFp(this.configuration).formationsControllerCreate(createFormationDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormationsApi
     */
    public formationsControllerFindAll(options?: RawAxiosRequestConfig) {
        return FormationsApiFp(this.configuration).formationsControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormationsApi
     */
    public formationsControllerFindOne(id: string, options?: RawAxiosRequestConfig) {
        return FormationsApiFp(this.configuration).formationsControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormationsApi
     */
    public formationsControllerRemove(id: string, options?: RawAxiosRequestConfig) {
        return FormationsApiFp(this.configuration).formationsControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateFormationDto} updateFormationDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormationsApi
     */
    public formationsControllerRemoveSkills(id: string, updateFormationDto: UpdateFormationDto, options?: RawAxiosRequestConfig) {
        return FormationsApiFp(this.configuration).formationsControllerRemoveSkills(id, updateFormationDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SearchFormationDto} searchFormationDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormationsApi
     */
    public formationsControllerSearchAll(searchFormationDto: SearchFormationDto, options?: RawAxiosRequestConfig) {
        return FormationsApiFp(this.configuration).formationsControllerSearchAll(searchFormationDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateFormationDto} updateFormationDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormationsApi
     */
    public formationsControllerUpdate(id: string, updateFormationDto: UpdateFormationDto, options?: RawAxiosRequestConfig) {
        return FormationsApiFp(this.configuration).formationsControllerUpdate(id, updateFormationDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProjectsApi - axios parameter creator
 * @export
 */
export const ProjectsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {UpdateProjectDto} updateProjectDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsControllerAddSkills: async (id: string, updateProjectDto: UpdateProjectDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectsControllerAddSkills', 'id', id)
            // verify required parameter 'updateProjectDto' is not null or undefined
            assertParamExists('projectsControllerAddSkills', 'updateProjectDto', updateProjectDto)
            const localVarPath = `/projects/{id}/skills/add`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProjectDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateProjectDto} createProjectDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsControllerCreate: async (createProjectDto: CreateProjectDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createProjectDto' is not null or undefined
            assertParamExists('projectsControllerCreate', 'createProjectDto', createProjectDto)
            const localVarPath = `/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProjectDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsControllerFindOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectsControllerFindOne', 'id', id)
            const localVarPath = `/projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsControllerRemove: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectsControllerRemove', 'id', id)
            const localVarPath = `/projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateProjectDto} updateProjectDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsControllerRemoveSkills: async (id: string, updateProjectDto: UpdateProjectDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectsControllerRemoveSkills', 'id', id)
            // verify required parameter 'updateProjectDto' is not null or undefined
            assertParamExists('projectsControllerRemoveSkills', 'updateProjectDto', updateProjectDto)
            const localVarPath = `/projects/{id}/skills/remove`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProjectDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SearchProjectDto} searchProjectDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsControllerSearchAll: async (searchProjectDto: SearchProjectDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'searchProjectDto' is not null or undefined
            assertParamExists('projectsControllerSearchAll', 'searchProjectDto', searchProjectDto)
            const localVarPath = `/projects/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchProjectDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateProjectDto} updateProjectDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsControllerUpdate: async (id: string, updateProjectDto: UpdateProjectDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectsControllerUpdate', 'id', id)
            // verify required parameter 'updateProjectDto' is not null or undefined
            assertParamExists('projectsControllerUpdate', 'updateProjectDto', updateProjectDto)
            const localVarPath = `/projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProjectDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectsApi - functional programming interface
 * @export
 */
export const ProjectsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {UpdateProjectDto} updateProjectDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsControllerAddSkills(id: string, updateProjectDto: UpdateProjectDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsControllerAddSkills(id, updateProjectDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectsApi.projectsControllerAddSkills']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateProjectDto} createProjectDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsControllerCreate(createProjectDto: CreateProjectDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsControllerCreate(createProjectDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectsApi.projectsControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProjectDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectsApi.projectsControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectsApi.projectsControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectsApi.projectsControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateProjectDto} updateProjectDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsControllerRemoveSkills(id: string, updateProjectDto: UpdateProjectDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsControllerRemoveSkills(id, updateProjectDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectsApi.projectsControllerRemoveSkills']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {SearchProjectDto} searchProjectDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsControllerSearchAll(searchProjectDto: SearchProjectDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProjectDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsControllerSearchAll(searchProjectDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectsApi.projectsControllerSearchAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateProjectDto} updateProjectDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsControllerUpdate(id: string, updateProjectDto: UpdateProjectDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsControllerUpdate(id, updateProjectDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectsApi.projectsControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProjectsApi - factory interface
 * @export
 */
export const ProjectsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectsApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {UpdateProjectDto} updateProjectDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsControllerAddSkills(id: string, updateProjectDto: UpdateProjectDto, options?: any): AxiosPromise<ProjectDto> {
            return localVarFp.projectsControllerAddSkills(id, updateProjectDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateProjectDto} createProjectDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsControllerCreate(createProjectDto: CreateProjectDto, options?: any): AxiosPromise<ProjectDto> {
            return localVarFp.projectsControllerCreate(createProjectDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsControllerFindAll(options?: any): AxiosPromise<Array<ProjectDto>> {
            return localVarFp.projectsControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsControllerFindOne(id: string, options?: any): AxiosPromise<ProjectDto> {
            return localVarFp.projectsControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsControllerRemove(id: string, options?: any): AxiosPromise<ProjectDto> {
            return localVarFp.projectsControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateProjectDto} updateProjectDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsControllerRemoveSkills(id: string, updateProjectDto: UpdateProjectDto, options?: any): AxiosPromise<ProjectDto> {
            return localVarFp.projectsControllerRemoveSkills(id, updateProjectDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SearchProjectDto} searchProjectDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsControllerSearchAll(searchProjectDto: SearchProjectDto, options?: any): AxiosPromise<Array<ProjectDto>> {
            return localVarFp.projectsControllerSearchAll(searchProjectDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateProjectDto} updateProjectDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsControllerUpdate(id: string, updateProjectDto: UpdateProjectDto, options?: any): AxiosPromise<ProjectDto> {
            return localVarFp.projectsControllerUpdate(id, updateProjectDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjectsApi - object-oriented interface
 * @export
 * @class ProjectsApi
 * @extends {BaseAPI}
 */
export class ProjectsApi extends BaseAPI {
    /**
     * 
     * @param {string} id 
     * @param {UpdateProjectDto} updateProjectDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectsControllerAddSkills(id: string, updateProjectDto: UpdateProjectDto, options?: RawAxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).projectsControllerAddSkills(id, updateProjectDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateProjectDto} createProjectDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectsControllerCreate(createProjectDto: CreateProjectDto, options?: RawAxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).projectsControllerCreate(createProjectDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectsControllerFindAll(options?: RawAxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).projectsControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectsControllerFindOne(id: string, options?: RawAxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).projectsControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectsControllerRemove(id: string, options?: RawAxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).projectsControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateProjectDto} updateProjectDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectsControllerRemoveSkills(id: string, updateProjectDto: UpdateProjectDto, options?: RawAxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).projectsControllerRemoveSkills(id, updateProjectDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SearchProjectDto} searchProjectDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectsControllerSearchAll(searchProjectDto: SearchProjectDto, options?: RawAxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).projectsControllerSearchAll(searchProjectDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateProjectDto} updateProjectDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectsControllerUpdate(id: string, updateProjectDto: UpdateProjectDto, options?: RawAxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).projectsControllerUpdate(id, updateProjectDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SkillsApi - axios parameter creator
 * @export
 */
export const SkillsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateSkillDto} createSkillDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        skillsControllerCreate: async (createSkillDto: CreateSkillDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createSkillDto' is not null or undefined
            assertParamExists('skillsControllerCreate', 'createSkillDto', createSkillDto)
            const localVarPath = `/skills`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSkillDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        skillsControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/skills`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        skillsControllerFindOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('skillsControllerFindOne', 'id', id)
            const localVarPath = `/skills/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        skillsControllerRemove: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('skillsControllerRemove', 'id', id)
            const localVarPath = `/skills/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SearchSkillDto} searchSkillDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        skillsControllerSearchAll: async (searchSkillDto: SearchSkillDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'searchSkillDto' is not null or undefined
            assertParamExists('skillsControllerSearchAll', 'searchSkillDto', searchSkillDto)
            const localVarPath = `/skills/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchSkillDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateSkillDto} updateSkillDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        skillsControllerUpdate: async (id: string, updateSkillDto: UpdateSkillDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('skillsControllerUpdate', 'id', id)
            // verify required parameter 'updateSkillDto' is not null or undefined
            assertParamExists('skillsControllerUpdate', 'updateSkillDto', updateSkillDto)
            const localVarPath = `/skills/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateSkillDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SkillsApi - functional programming interface
 * @export
 */
export const SkillsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SkillsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateSkillDto} createSkillDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async skillsControllerCreate(createSkillDto: CreateSkillDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkillDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.skillsControllerCreate(createSkillDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SkillsApi.skillsControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async skillsControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SkillDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.skillsControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SkillsApi.skillsControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async skillsControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkillDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.skillsControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SkillsApi.skillsControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async skillsControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkillDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.skillsControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SkillsApi.skillsControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {SearchSkillDto} searchSkillDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async skillsControllerSearchAll(searchSkillDto: SearchSkillDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SkillDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.skillsControllerSearchAll(searchSkillDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SkillsApi.skillsControllerSearchAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateSkillDto} updateSkillDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async skillsControllerUpdate(id: string, updateSkillDto: UpdateSkillDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkillDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.skillsControllerUpdate(id, updateSkillDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SkillsApi.skillsControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SkillsApi - factory interface
 * @export
 */
export const SkillsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SkillsApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateSkillDto} createSkillDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        skillsControllerCreate(createSkillDto: CreateSkillDto, options?: any): AxiosPromise<SkillDto> {
            return localVarFp.skillsControllerCreate(createSkillDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        skillsControllerFindAll(options?: any): AxiosPromise<Array<SkillDto>> {
            return localVarFp.skillsControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        skillsControllerFindOne(id: string, options?: any): AxiosPromise<SkillDto> {
            return localVarFp.skillsControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        skillsControllerRemove(id: string, options?: any): AxiosPromise<SkillDto> {
            return localVarFp.skillsControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SearchSkillDto} searchSkillDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        skillsControllerSearchAll(searchSkillDto: SearchSkillDto, options?: any): AxiosPromise<Array<SkillDto>> {
            return localVarFp.skillsControllerSearchAll(searchSkillDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateSkillDto} updateSkillDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        skillsControllerUpdate(id: string, updateSkillDto: UpdateSkillDto, options?: any): AxiosPromise<SkillDto> {
            return localVarFp.skillsControllerUpdate(id, updateSkillDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SkillsApi - object-oriented interface
 * @export
 * @class SkillsApi
 * @extends {BaseAPI}
 */
export class SkillsApi extends BaseAPI {
    /**
     * 
     * @param {CreateSkillDto} createSkillDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkillsApi
     */
    public skillsControllerCreate(createSkillDto: CreateSkillDto, options?: RawAxiosRequestConfig) {
        return SkillsApiFp(this.configuration).skillsControllerCreate(createSkillDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkillsApi
     */
    public skillsControllerFindAll(options?: RawAxiosRequestConfig) {
        return SkillsApiFp(this.configuration).skillsControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkillsApi
     */
    public skillsControllerFindOne(id: string, options?: RawAxiosRequestConfig) {
        return SkillsApiFp(this.configuration).skillsControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkillsApi
     */
    public skillsControllerRemove(id: string, options?: RawAxiosRequestConfig) {
        return SkillsApiFp(this.configuration).skillsControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SearchSkillDto} searchSkillDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkillsApi
     */
    public skillsControllerSearchAll(searchSkillDto: SearchSkillDto, options?: RawAxiosRequestConfig) {
        return SkillsApiFp(this.configuration).skillsControllerSearchAll(searchSkillDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateSkillDto} updateSkillDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkillsApi
     */
    public skillsControllerUpdate(id: string, updateSkillDto: UpdateSkillDto, options?: RawAxiosRequestConfig) {
        return SkillsApiFp(this.configuration).skillsControllerUpdate(id, updateSkillDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UpdateUserDto} updateUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerAddSkills: async (updateUserDto: UpdateUserDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateUserDto' is not null or undefined
            assertParamExists('usersControllerAddSkills', 'updateUserDto', updateUserDto)
            const localVarPath = `/users/me/skills/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateUserDto} createUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerCreate: async (createUserDto: CreateUserDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUserDto' is not null or undefined
            assertParamExists('usersControllerCreate', 'createUserDto', createUserDto)
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerFindOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersControllerFindOne', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerRemove: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateUserDto} updateUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerRemoveSkills: async (updateUserDto: UpdateUserDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateUserDto' is not null or undefined
            assertParamExists('usersControllerRemoveSkills', 'updateUserDto', updateUserDto)
            const localVarPath = `/users/me/skills/remove`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SearchUserDto} searchUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerSearchAll: async (searchUserDto: SearchUserDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'searchUserDto' is not null or undefined
            assertParamExists('usersControllerSearchAll', 'searchUserDto', searchUserDto)
            const localVarPath = `/users/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateUserDto} updateUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUpdate: async (updateUserDto: UpdateUserDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateUserDto' is not null or undefined
            assertParamExists('usersControllerUpdate', 'updateUserDto', updateUserDto)
            const localVarPath = `/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {UpdateUserDto} updateUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerAddSkills(updateUserDto: UpdateUserDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerAddSkills(updateUserDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersControllerAddSkills']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateUserDto} createUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerCreate(createUserDto: CreateUserDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerCreate(createUserDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerRemove(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerRemove(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpdateUserDto} updateUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerRemoveSkills(updateUserDto: UpdateUserDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerRemoveSkills(updateUserDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersControllerRemoveSkills']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {SearchUserDto} searchUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerSearchAll(searchUserDto: SearchUserDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerSearchAll(searchUserDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersControllerSearchAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpdateUserDto} updateUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerUpdate(updateUserDto: UpdateUserDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerUpdate(updateUserDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @param {UpdateUserDto} updateUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerAddSkills(updateUserDto: UpdateUserDto, options?: any): AxiosPromise<UserDto> {
            return localVarFp.usersControllerAddSkills(updateUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateUserDto} createUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerCreate(createUserDto: CreateUserDto, options?: any): AxiosPromise<UserDto> {
            return localVarFp.usersControllerCreate(createUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerFindAll(options?: any): AxiosPromise<Array<UserDto>> {
            return localVarFp.usersControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerFindOne(id: string, options?: any): AxiosPromise<UserDto> {
            return localVarFp.usersControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerRemove(options?: any): AxiosPromise<UserDto> {
            return localVarFp.usersControllerRemove(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateUserDto} updateUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerRemoveSkills(updateUserDto: UpdateUserDto, options?: any): AxiosPromise<UserDto> {
            return localVarFp.usersControllerRemoveSkills(updateUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SearchUserDto} searchUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerSearchAll(searchUserDto: SearchUserDto, options?: any): AxiosPromise<Array<UserDto>> {
            return localVarFp.usersControllerSearchAll(searchUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateUserDto} updateUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUpdate(updateUserDto: UpdateUserDto, options?: any): AxiosPromise<UserDto> {
            return localVarFp.usersControllerUpdate(updateUserDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @param {UpdateUserDto} updateUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerAddSkills(updateUserDto: UpdateUserDto, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerAddSkills(updateUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateUserDto} createUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerCreate(createUserDto: CreateUserDto, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerCreate(createUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerFindAll(options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerFindOne(id: string, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerRemove(options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerRemove(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateUserDto} updateUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerRemoveSkills(updateUserDto: UpdateUserDto, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerRemoveSkills(updateUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SearchUserDto} searchUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerSearchAll(searchUserDto: SearchUserDto, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerSearchAll(searchUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateUserDto} updateUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerUpdate(updateUserDto: UpdateUserDto, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerUpdate(updateUserDto, options).then((request) => request(this.axios, this.basePath));
    }
}



